"use strict";(globalThis.webpackChunkshroudserver=globalThis.webpackChunkshroudserver||[]).push([[4743],{6508:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"networking-basics/enet-csharp","title":"ENet","description":"Overview","source":"@site/docs/networking-basics/enet-csharp.md","sourceDirName":"networking-basics","slug":"/networking-basics/enet-csharp","permalink":"/shroudserver-site/docs/networking-basics/enet-csharp","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Photon Networking - ENet","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Photon Networking - UDP","permalink":"/shroudserver-site/docs/networking-basics/photon-udp"}}');var s=t(4848),r=t(8453);const o={sidebar_label:"Photon Networking - ENet",sidebar_position:4},a="ENet",l={},h=[{value:"Overview",id:"overview",level:2},{value:"What is ENet?",id:"what-is-enet",level:3},{value:"ENet license",id:"enet-license",level:3},{value:"ENet-CSharp",id:"enet-csharp",level:3},{value:"ENet-CSharp modifications",id:"enet-csharp-modifications",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"enet",children:"ENet"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"A deeper look into ENet, the reliable UDP library that Photon is based on."}),"\n",(0,s.jsx)(n.h3,{id:"what-is-enet",children:"What is ENet?"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"ENet's purpose is to provide a relatively thin, simple and robust network communication layer on top of UDP (User Datagram Protocol). The primary feature it provides is optional reliable, in-order delivery of packets."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"http://enet.bespin.org/features.html",children:"ENet Features"})}),"\n",(0,s.jsx)(n.p,{children:"It's used underneath Photon and that's why I chose it for this project also. It required quite a bit of modifications to start the communication with the SotA PUN client."}),"\n",(0,s.jsx)(n.h3,{id:"enet-license",children:"ENet license"}),"\n",(0,s.jsx)(n.p,{children:"MIT, so it's very permissive and allows commercial use."}),"\n",(0,s.jsx)(n.h3,{id:"enet-csharp",children:"ENet-CSharp"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/Molth/enet-csharp",children:"ENet-CSharp"})," is a pure C# translation of the original ENet C library.\r\nIt from what I can tell, a very close translation of the original C code. Very low level, unsafe C# code, using pointers and structs and manual memory management.\r\nIt has very low memory print ( just over 15Mb on debug mode ) and it's very fast."]}),"\n",(0,s.jsx)(n.h4,{id:"enet-csharp-modifications",children:"ENet-CSharp modifications"}),"\n",(0,s.jsx)(n.p,{children:"I had to make some modifications to the original ENet-CSharp code, to get it working with Photon protocol.\r\nENet's original packet structure was not compatible with photon, but with some tweaks, I was able to get it working."}),"\n",(0,s.jsx)(n.p,{children:"Changes I had to make:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["New OutgoingCommand/IncomingCommand structure.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enet sends commands in array and just reads them until end."}),"\n",(0,s.jsx)(n.li,{children:"Photon header has command count, so I had to change reading and writing of commands to use that."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["New Connection handling.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Connection initialization and verifying is very different from photon."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Acknowledgement handling.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Photon has different way of handling acks, so I had to change that also."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["PeerId handling.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Photon uses peerId to identify connections."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"And some more, will document everything later."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"ENet is working on the lowest level of the server, handles zero game logic, just raw packets and connections.\r\nIt provides events for connections and packet receiving, and that's it."})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);